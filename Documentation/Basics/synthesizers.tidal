--------------------------------
------ Additive synthesis ------
--------------------------------

------- SUPERGONG -------
-- An example of additive synthesis, building up a gong-like noise from a sum of sine-wave harmonics. Notice how the envelope timescale and amplitude can be scaled as a function of the harmonic frequency.

-- voice (0): provides something like a tone knob
-- decay (1): adjusts how the harmonics decay
-- accelerate (0): for pitch glide

d1 $ n (slow 2 $ fmap (*7) $ run 8) 
  # s "supergong" 
  # decay "[1 0.2]/4" 
  # voice "[0.5 0]/8" 

--------------------------------
---- Substractive synthesis ----
--------------------------------

------- SUPERSQUARE -------
-- A moog-inspired square-wave synth; variable-width pulses with filter frequency modulated by an LFO:

-- voice: controls the pulse width (exactly zero or one will make no sound)
-- decay (0): the decay
-- accelerate (0): pitch glide
-- semitone (12): how far off in pitch the secondary oscillator is (need not be integer)
-- resonance (0.2): filter resonance
-- lfo (1): how much the LFO affects the filter frequency
-- rate (1): LFO rate
-- pitch1 (1): filter frequency scaling multiplier, the frequency itself follows the pitch set by “n”

d1 $ n (slow 2 $ fmap (*2) $ run 16 -12)
  # s "supersquare" 
  # voice "[0.5 0.25]/8" 
  # decay "[0.4 0.75 1 0.2]/8" 
  # accelerate "1.0"
  # semitone "[0.95 0]/8"
  # resonance "[0.5 0.1]/2"
  # lfo "[1 0.2]/2" 
  # rate "[0.95 0.5 0.25 0.1]/2"
  # pitch1 "[0.75 0.1 0.25 1.0]/4"


------- SUPERSAW -------
-- A moog-inspired sawtooth synth; slightly detuned saws with triangle harmonics, filter frequency modulated by LFO:

-- voice (0.5): controls a relative phase and detune amount
-- decay (0)
-- accelerate (0): pitch glide
-- semitone (12): how far off in pitch the secondary oscillator is (need not be integer)
-- resonance (0.2) filter resonance
-- lfo (1) how much the LFO affects the filter frequency
-- rate (1): LFO rate
-- pitch1 (1): filter frequency scaling multiplier, the frequency itself follows the pitch set by “n”

d1 $ n (slow 2 $ fmap (*2) $ run 16 -12)
  # s "supersaw" 
  # voice "[0.5 0.25]/8" 
  # decay "[0.4 0.75 1 0.2]/8" 
  # accelerate "1.0"
  # semitone "[0.95 0]/8"
  # resonance "[0.5 0.1]/2"
  # lfo "[1 0.2]/2" 
  # rate "[0.95 0.5 0.25 0.1]/2"
  # pitch1 "4"


------- SUPERPMW --------
-- A moog-inspired PWM synth; pulses multiplied by phase-shifted pulses, double filtering with an envelope on the second

-- voice: controls the phase shift rate
-- decay (0): decay.
-- accelerate (0): pitch glide
-- semitone (12): how far off in pitch the secondary oscillator is (need not be integer)
-- resonance (0.2): filter resonance
-- lfo (1): how much the LFO affects the filter frequency
-- rate (1): LFO rate
-- pitch1 (1): filter frequency scaling multiplier, the frequency itself follows the pitch set by “n”

d1 $ n (slow 2 $ fmap (*2) $ run 16 -12)
  # s "superpwm" 
  # voice "[0.5 0.25]/8"
  # decay "[0.4 0.75 1 0.2]/8" 
  # accelerate "0.0"
  # semitone "[0.3 1 4]/3"
  # resonance "[0.5 0.1]/2"
  # lfo "[1 0.2]/2" 
  # rate "[0.95 0.5 0.25 0.1]/2"
  # pitch1 "[1 3]/2"


------- SUPER CHIP --------
-- Uses the Atari ST emulation UGen with 3 oscillators:

-- slide (0): for a linear frequency glide
-- rate (1): repeats the above glide “n” times (can be fractional or negative)
-- accelerate (0): for an overall glide
-- pitch2 (2): control the ratio of harmonics
-- pitch3 (3): control the ratio of harmonics
-- voice (0): causes variations in the levels of the 3 oscillators

d1 $ n (slow 2 $ fmap (*2) $ run 16 -12)
  # s "superchip" 
  # slide "[0.05 0.25]/8"
  # rate "[0.95 0.5 0.25 0.1]/2"
  # accelerate "0.0"
  # pitch2 "[1 3]/2"
  # pitch3 "[2 5]/8"
  # voice "[0.4 0.75 1 0.2]/8" 

------- SUPER HOOVER --------
-- Hoover, adapted from Wouter Snoei’s implementation:

-- slide (0): for the amount of initial pitch glide, positive slides up in pitch, negative slides down
-- decay (0): for a different envelope shape
-- accelerate (0): for constant pitch glide

d1 $ n (slow 2 $ fmap (*2) $ run 16)
  # s "superhoover" 
  # slide "[0.0 0.75 1 0.82]/8" 
  # decay "[0.05 0.25 0.7 0.0]*1.5"
  # accelerate "0.0"

------- SUPERZOW --------
-- Phased saws:

-- decay (0): for envelope shaping
-- accelerate (0): for pitch bend
-- slide (1): how fast it moves through the phase
-- detune (1): for oscillator detuning

d1 $ n (slow 2 $ fmap (*2) $ run 16 - 12)
  # s "superzow" 
  # decay "[0.05 0.25 0.7 0.0]*1.5"
  # accelerate "0.0"
  # slide "[0.0 0.75 1 0.82]/8" 
  # detune "[0.0 0.5 1.0 0.0 2.0 0.0 6.0 10.0]/3"

------- SUPERTRON --------
-- Feedback PWM:

-- accelerate (0): pitch-glide
-- voice (0): number of voices
-- detune (0): detune amount

d1 $ n (slow 2 $ fmap (*2) $ run 16 - 12)
  # s "supertron" 
  # accelerate "0.0"
  # voice "[0 1 2]/1.5"
  # detune "[0.0 0.5 1.0 0.0 2.0 0.1]/3"


------- SUPER REESE --------
-- Vaguely Reese-like synth:

-- accelerate (0): pitch-glide.
-- voice (0): number of voices
-- detune (0): detune amount

d1 $ n (slow 2 $ fmap (*2) $ run 16 - 12)
  # s "superreese" 
  # accelerate "1.0"
  # voice "[0 1 2]/1.5"
  # detune "[0.0 0.5 1.0 0.0 2.0 0.1]/3"


-------------------------------
-------- Digital Noise --------
-------------------------------

------- SUPER STATIC --------
-- Impulse noise with a fadein/fadeout:

-- voice: at 0 is a digital noise for which “n” controls rate, at 1 is Brown+White noise for which “n” controls knee frequency
-- accelerate: causes glide in n, “rate” will cause it to repeat
-- pitch1: scales the bandpass frequency (which tracks “n”)
-- slide: works like accelerate on the bandpass
-- resonance: is the filter resonance

d1 $ n (slow 2 $ fmap (*2) $ run 16)
  # s "superstatic" 
  # voice "0"
  # accelerate "1.0"
  # pitch1 "0"
  # slide "0.0"
  # resonance "0.0"

------- SUPER COMPARITOR --------

-- voice (0.5): scales the comparator frequencies, higher values will sound “breathier”
-- decay (0)
-- accelerate (0): pitch glide
-- resonance (0.5): filter resonance
-- lfo (1): how much the LFO affects the filter frequency
-- rate (1): LFO rate
-- pitch1 (1): filter frequency scaling multiplier, the frequency itself follows the pitch set by “n”

d1 $ n (slow 2 $ fmap (*2) $ run 16)
  # s "supercomparator" 
  # voice "[0.5 4 -4 2 0]"
  # decay "[0.0 0.3 0.1 0.6]"
  # accelerate "1.0"
  # resonance "0.5"
  # lfo "[1 0 3]/2"
  # rate "[0.2 1.0 2.5]/3"
  # pitch1 "1.0"

--------------------------------
------ Physical Modelling ------
--------------------------------

------- SUPER MANDOLIN -------
-- Physical modeling of a vibrating string, using a delay line (CombL) excited by an intial pulse (Impulse). To make it a bit richer, I’ve combined two slightly detuned delay lines:

-- sustain (1): changes the envelope timescale
-- accelerate (0): pitch-glide
-- detune (0.2): detune amount

d1 $ n (slow 3 $ fmap (*1.95) $ run 32 - 12)
  # s "supermandolin" 
  # sustain "[0.5 4 8 2 0.1]"
  # accelerate "0.0"
  # detune "[0.0 0.3 0.91 0.6]/2"


------- SUPER PIANO -------
-- Hooking into a nice synth piano already in SuperCollider:

-- velocity: affects how hard the keys are pressed
-- sustain: controls envelope and decay time
-- detune (0.1): detune amount.

d1 $ n (slow 3 $ fmap (*3.0) $ run 32 - 12)
  # s "superpiano" 
  # velocity "0.8"
  # sustain "[0.5 4 8 2 0.1]"
  # detune "0.1"


------- SUPER FORK -------
-- Tuning fork from Ben Gold’s experimentation and from “On the acoustics of tuning forks”, Rossing Russell and Brown:

-- accelerate (0): pitch-glide amount.
d1 $ n (slow 3.5 $ fmap (*3.0) $ run 32 - 12)
  # s "superfork" 
  # accelerate "0.0"


------- SUPER VIBE -------
-- Vibraphone simulation, adapted with some help from Kevin Larke’s thesis Real Time Vibraphone Pitch and Timbre Classification:

-- decay (0): use larger values to damp higher harmonics
-- velocity (1): higher velocity will brighten the sound a bit
-- accelerate (0): for a linear pitch bend
-- modamp (1): amplitude of the tremolo (0-2 is OK)
-- modfreq (7): frequency of the tremolo
-- detune (0): adjusts a high harmonic to give the sound a different character

d1 $ n (slow 2 $ fmap (*2) $ run 16)
  # s "supervibe" 
  # decay "[0 2 20 100]/4"
  # velocity "1"
  # accelerate "0.0"
  # detune "[0.2 1.0 20.5]/3"

hush

